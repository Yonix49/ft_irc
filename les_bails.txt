1 - gerer la connection genre username et password

2 - gerer les users dans un vector lors des connect et disconnect

3 - gerer les modos (donc les commandes qui vont avec) et les users basique

4 - gerer les channels dans une map et donc bien stocker les
	users pour pouvoir envoyer un message correctement a tout les membres du channel

5 - bien recuperer les messages, parser et detecter les commandes avec les options etc

6 - faire toutes les commandes (JOIN, MSG, PRIVMSG etc...)

7 - quitter le programme propement




irssi renvoie toujours /r/n a la fin des commandes
pour netcat il faut toujours check dans l'ordre en premier le PASS puis le NICK puis le USER



---------GERER LA CONNECTION-----------
1- accept les clients
2- tant que PASS n'est pas valide ne pas check NICK
3- des que PASS est valide, check NICK
4- des que NICK est valide, check USER
5- des que les 3 sont valides, envoyer le RPL_WELCOME

il faut attendre du client les commandes PASS puis NICK puis USER,
irssi peut les envoyer tous d'un coup, tandis que nc va envoyer un par un.
nc peut envoyer de bonnes commandes mais de le mauvais ordre, il faut faire attention a ca
nc ne fait aucun parsing avant d'envoyer une commande

Donc il faut coder les commandes PASS NICK et USER en lisant la doc,
et les appeler des que la commande est recue depuis le client.

Une fois que les trois variables sont bien set, on peut faire un RPL_WELCOME et executer les commandes du serveur.




Class User
{
	username
	fd
	clientadress
	etc...
}


Class channel
{
	name
	nb_user
	map(user)
	etc...
}

Class server
{
	class channel
	et tout le reste
}




------------ doc --------------



A client is anything connecting to a server that is not another server.
Each client is distinguished from other clients by a unique nickname.
In addition to the nickname, all servers must have the following information about all clients:
the real name/address of the host that the client is connecting from,
the username of the client on that host,
and the server to which the client is connected.

Nicknames are non-empty strings with the following restrictions:

They MUST NOT contain any of the following characters: space (' ', 0x20), comma (',', 0x2C), asterisk ('*', 0x2A), question mark ('?', 0x3F), exclamation mark ('!', 0x21), at sign ('@', 0x40).
They MUST NOT start with any of the following characters: dollar ('$', 0x24), colon (':', 0x3A).
They MUST NOT start with a character listed as a channel type prefix.
They SHOULD NOT contain any dot character ('.', 0x2E).



----------- a faire --------------

- faire /mode sans arguments
- a chaque modifications de mode envoyer un rpl a tout les users du channel	
- faire mode -o 																//fait
- gerer correctement tout les rpl, que ce soit en cas d'erreur ou de succes
- faire part, kick, messages, (notice, who, whois ?)
- gerer la deconnection
- gerer les modes a la creation d'un channel



pour quit

_channels->invited
_channels->operator
_channels->users
	-> si jamais il y a un channel qui n'a plus de users, alors supprimer le channel (pareil pour part)
server.users