int Server::message_notice(std::vector<std::string> words, int fd, User *user,
		std::string param)
{
	int	flag;
	int	gotten_fd;

	(void)(fd);
	std::string to_compare;
	std::string my_nick = user->getNickname();
	flag = 0;
	for (std::vector<User>::iterator it = _users.begin(); it != _users.end(); ++it)
	{
		User &currentUser = *it;
		gotten_fd = currentUser.getFd();
		to_compare = currentUser.getNickname();
		if (to_compare == words[1])
		{
			std::cout << words[1] << "words === " << std::endl;
			flag++;
			break ;
		}
	}
	if (flag == 0)
	{
		sendOneRPL(ERR_WASNOSUCHNICK(user->getNickname(), words[1]), fd);
		return (1);
	}
	size_t startPos = param.find(":");
	std::string resultat;
	if (startPos != std::string::npos)
	{
	    resultat = param.substr(startPos + 1);
	}
	else
	{
	    startPos = param.find(to_compare); // Recherche de l'indice de début

	    if (startPos != std::string::npos)
	    {
	        resultat = param.substr(startPos + to_compare.length() + 1);
	    }
	}
	if (flag == 1)
	{
		std::string message = "Private message from " + user->getNickname();
		sendOneRPL(PRIVMSG(user->getNickname(), user->getUsername(), to_compare,
					resultat), gotten_fd);
	}
	return (0);
}

int Server::message_user(std::vector<std::string> words, int fd, User *user,
		std::string param)
{
	(void)(fd);
	std::string to_compare;
	std::string my_nick = user->getNickname();
	std::string messageBot;

	int flag = 0;
	int channel = 0;
	int bot = 0;

	int gotten_fd;
	channel = Server::channelExist(words[1]);
	for (std::vector<User>::iterator it = _users.begin(); it != _users.end(); ++it)
	{
		User &currentUser = *it;
		gotten_fd = currentUser.getFd();
		to_compare = currentUser.getNickname();
		if (to_compare == words[1])
		{
			flag++;
			break ;
		}
	}
	if (words[1].c_str()[0] == '#' && channel == -1 && flag == 0)
	{
		std::cout << "je suis ici" << std::endl;
		sendOneRPL(ERR_NOSUCHCHANNEL(user->getNickname(), words[1]), fd);
		return (1);
	}
	else if (flag == 0 && channel == -1)
	{
		sendOneRPL(ERR_WASNOSUCHNICK(user->getNickname(), words[1]), fd);
		return (1);
	}
	size_t pos_bot = 0;
	pos_bot = param.find("$BOT");
	if (pos_bot != std::string::npos)
	{
		std::cout << "BOT == 1" << std::endl;
		bot = 1;
	}
	
	std::cout << "je suis laaaaaaaa" << param << "BUFFER  dans msg ========== " << std::endl;
	std::string resultat; // Déclarez resultat ici, en dehors des blocs if
	size_t startPos;
	startPos = param.find(":"); // Recherche de l'indice de début
	
	if (channel != -1) // Cas channel
	{
	    // Réinitialisez startPos
	    startPos = param.find(_channels[channel]->getName());
	
	    if (startPos != std::string::npos)
	    {
	        resultat = param.substr(startPos + _channels[channel]->getName().length() + 1);
	    }
	}
	else if (startPos != std::string::npos) // Cas irssi
	{
	    resultat = param.substr(startPos + 1);
	}
	else // Cas NC
	{
	    // Réinitialisez startPos
	    startPos = param.find(to_compare);
	
	    if (startPos != std::string::npos)
	    {
	        resultat = param.substr(startPos + to_compare.length() + 1);
	    }
	}
	std::cout << "flag == " << flag << std::endl;
	if (flag == 1)
	{
		std::cout << "Je suis ici khey " << std::endl;
		std::cout << "NICKname " << user->getNickname() << std::endl;
		std::cout << "getUsername " <<  user->getUsername() << std::endl;
		std::cout << "destinateure " << to_compare << std::endl;
		std::cout << "message " << resultat << std::endl;

		sendOneRPL(PRIVMSG(user->getNickname(), user->getUsername(), to_compare,
					resultat), gotten_fd);
	}
	else if (channel != -1
			&& _channels[channel]->isUserinchan(user->getNickname(), 0) != -1)
	{
		_channels[channel]->sendMSGtoChan(PRIVMSG(user->getNickname(),
			user->getUsername(), _channels[channel]->getName(),
			resultat), fd);
			
		if (bot == 1)
		{
			std::tm localTime = {}; // Initialise localTime avec des zéros
			messageBot = "Salutations, " + user->getNickname() + "! Il est actuellement ";
			char hourStr[3] = {};
			int hour12 = (localTime.tm_hour % 12 == 0) ? 12 : localTime.tm_hour % 12;
			std::snprintf(hourStr, sizeof(hourStr), "%02d", hour12);
			messageBot += hourStr;
			messageBot += ":";
			char minStr[3] = {};
			std::snprintf(minStr, sizeof(minStr), "%02d", localTime.tm_min);
			messageBot += minStr;
			messageBot += (localTime.tm_hour < 12) ? " AM" : " PM";
			std::cout << messageBot << "MSG BOTT" << std::endl;
			std::string botnick("Bot Johnny");
			_channels[channel]->sendRPLtoChan(PRIVMSG(botnick,
			user->getUsername(), _channels[channel]->getName(),
			messageBot));
		}
	}
	else
	{
		sendOneRPL(ERR_NOTONCHANNEL(user->getUsername(),
					_channels[channel]->getName()), fd);
		std::cout << "No present in the channel" << std::endl;
	}
	return (0);
}


////////////////
int Server::nc_check(std::string str, int fd)
{
	std::vector<std::string> words = get_vector_ref(str);
	User *user = getUserNo(fd);
	if (!user)
		return (1);
	// int flag = 0;

	if (user && user->get_nc_check() <= 2)
	{
		try
		{
			if (!words.empty() && words.size() > 0)
			{
				if (words[0] == "PASS" && user->get_nc_check() == 0)
				{
					std::cout << "je suis mdp " << std::endl;
					if (words.size() == 2 && words[1] == _password.c_str())
					{
						std::cout << "good password" << std::endl;
						user->incre_nc_check();
					}
					else
					{
						sendOneRPL(ERR_PASSWDMISMATCH(user->getNickname()), fd);
						throw Error_rpl();
					}
				}
				else if (words[0] == "NICK" && user->get_nc_check() == 1)
				{
					if (words.size() == 2)
					{
						if (check_nick(words[1], fd, user) != 0)
						{
							throw Error_rpl();
							
						}
						else
						{
							user->incre_nc_check();
							user->setNickname(words[1]);
							// std::cout << "good NICK " << words[1] << std::endl;
						}
					}
					else
						sendOneRPL(ERR_NEEDMOREPARAMS(user->getNickname(), "NICK"), fd);
				}
				else if (words[0] == "USER" && user->get_nc_check() == 2)
				{ 
					if (check_user_nc(fd, user, words) != 0)
					{
						std::cerr << "Erreur commande USER" << std::endl;
						throw Error_rpl();
					}
					else
					{
						user->incre_nc_check();
					}
				}
				else
				{
					sendOneRPL(ERR_UNKNOWNCOMMAND(user->getNickname(), words[0]), fd);
					throw Error_rpl();
				}
			}
		}
		catch (const Error_rpl &ex)
		{
			std::cerr << "Erreur : " << get_Error_user(fd) << std::endl;
		}
	}

	if (user->get_nc_check() == 3)
		user->set_in_server(true);
	return 0;
}
////
int Server::check_nick(std::string nickname, int fd, User *user)
{
	std::string to_compare;

	int gotten_fd;
	if (nickname.find(' ') != std::string::npos ||
		nickname.find(',') != std::string::npos ||
		nickname.find('*') != std::string::npos ||
		nickname.find('?') != std::string::npos ||
		nickname.find('@') != std::string::npos ||
		nickname.find('!') != std::string::npos)
	{
		std::cerr << "Invalid character in nickname" << std::endl;
		sendOneRPL(ERR_ERRONEUSNICKNAME(user->getNickname()), fd);
		set_Error_user("ERR_ERRONEUSNICKNAME", fd);
		return 1;
	}

	char c = nickname[0];
	if (c == ':' || c == '#' || c == '&')
	{
		std::cerr << "Invalid character in nickname" << std::endl;
		sendOneRPL(ERR_ERRONEUSNICKNAME(user->getNickname()), fd);
		set_Error_user("ERR_ERRONEUSNICKNAME", fd);
		return (1);
	}
	if (nickname.length() > 200)
	{
		std::cerr << "Nickname is too long" << std::endl;
		sendOneRPL(ERR_ERRONEUSNICKNAME(user->getNickname()), fd);
		set_Error_user("ERR_ERRONEUSNICKNAME", fd);
		return (1);
	}
	for (int i = 0; nickname[i]; i++)
	{
		if (nickname[i] < 32 || nickname[i] > 126)
		{
			std::cerr << "Invalid character in nickname" << std::endl;
			sendOneRPL(ERR_ERRONEUSNICKNAME(user->getNickname()), fd);
			set_Error_user("ERR_ERRONEUSNICKNAME", fd);
			return (1);
		}
	}
	int flag = 0;
	for (std::vector<User>::iterator it = _users.begin(); it != _users.end(); ++it)
	{
		User &currentUser = *it;
		to_compare = currentUser.getNickname();
		gotten_fd = currentUser.getFd();
		if (to_compare == nickname && gotten_fd != fd && is_connected(fd) == false)
		{
			sendOneRPL(ERR_NICKNAMEINUSE(to_compare), fd); //Cette ligne me rend zinzin	
			nickname += "_";
			user->setNickname(nickname);
			it = _users.begin();
			flag = 1;
			// return (0);
		}
	}
	if (flag == 1)
	{	
		sendOneRPL(NICK(user->getNickname(), user->getUsername(), nickname), fd); //Cette ligne me rend zinzin	
		return (0);
	}
	for (std::vector<User>::iterator it = _users.begin(); it != _users.end(); ++it)
	{
		User &currentUser = *it;
		to_compare = currentUser.getNickname();
		gotten_fd = currentUser.getFd();
		if (to_compare == nickname && gotten_fd != fd)
		{
			sendOneRPL(ERR_NICKNAMEINUSE(to_compare), fd); //Cette ligne me rend zinzin	
			std::cout << "same user_name found" << to_compare << "  " << nickname << std::endl;
			return (1);
		}
	}
	std::cout << "hehooo" << std::endl;
	sendOneRPL(NICK(user->getNickname(), user->getUsername(), nickname), fd); //Cette ligne me rend zinzin	
	user->setNickname(nickname);
	return (0);
}
